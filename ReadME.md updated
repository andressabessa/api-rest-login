# API REST Login

Uma API REST simples de login com funcionalidades de autenticação, testes automatizados e testes de performance, desenvolvida para estudos de Teste de Software.

## 🚀 Funcionalidades

### 1. Login com Sucesso

- Autenticação com email e senha  
- Geração de token JWT  
- Retorno de dados do usuário

### 2. Login Inválido

- Validação de credenciais incorretas  
- Contagem de tentativas restantes  
- Mensagens de erro apropriadas

### 3. Bloquear Senha Após 3 Tentativas

- Bloqueio automático após 3 tentativas inválidas  
- Período de bloqueio de 15 minutos  
- Contagem regressiva do tempo restante

### 4. Lembrar Senha

- Solicitação de recuperação por email  
- Validação de usuário existente  
- Simulação de envio de email

## 🛠️ Tecnologias Utilizadas

- **Node.js** - Runtime JavaScript  
- **Express.js** - Framework web  
- **bcryptjs** - Criptografia de senhas  
- **jsonwebtoken** - Autenticação JWT  
- **Swagger** - Documentação da API  
- **Mocha** - Framework de testes  
- **Supertest** - Testes de integração  
- **Chai** - Biblioteca de asserções  
- **k6** - Testes de performance  

## 📋 Pré-requisitos

- Node.js (versão 14 ou superior)  
- npm ou yarn  
- k6 instalado globalmente:  
  [https://k6.io/docs/getting-started/installation/](https://k6.io/docs/getting-started/installation/)

## 🔧 Instalação

1. Clone o repositório:

```bash
git clone <url-do-repositorio>
cd api-rest-login
````

2. Instale as dependências:

```bash
npm install
```

## 🚀 Como Executar

### Desenvolvimento

```bash
npm run dev
```

### Produção

```bash
npm start
```

### Testes Automatizados

```bash
# Executar todos os testes funcionais
npm test

# Executar testes em modo watch
npm run test:watch
```

### Testes de Performance

```bash
# Executar teste padrão com k6
k6 run test/performance/login.perf.js

# Executar com parâmetros personalizados
k6 run --vus 50 --duration 30s test/performance/login.perf.js

# Exportar resultado em JSON
k6 run test/performance/login.perf.js --out json=reports/performance.json

# Gerar relatório HTML (necessário k6-reporter)
k6-reporter reports/performance.json -o reports/performance.html
```

## 📂 Documentação da API

A documentação interativa da API está disponível via Swagger:

**URL:** `http://localhost:3000/api-docs`

### Endpoints Disponíveis

#### POST `/api/auth/login`

Realizar login do usuário.

**Body:**

```json
{
  "email": "user@example.com",
  "password": "password"
}
```

#### POST `/api/auth/remember-password`

Solicitar lembrança de senha.

**Body:**

```json
{
  "email": "user@example.com"
}
```

#### GET `/api/auth/verify-token`

Verificar se o token é válido.

**Headers:**

```
Authorization: Bearer <token>
```

#### GET `/health`

Verificar status da API.

---

## 🧰 Testes Automatizados

### 1. Testes de Login com Sucesso

* ✅ Login com credenciais válidas
* ✅ Validação de campos obrigatórios

### 2. Testes de Login Inválido

* ✅ Credenciais incorretas
* ✅ Email inexistente
* ✅ Contagem de tentativas restantes

### 3. Testes de Bloqueio de Conta

* ✅ Bloqueio após 3 tentativas
* ✅ Manutenção do bloqueio com credenciais corretas
* ✅ Desbloqueio após período de tempo

### 4. Testes de Lembrar Senha

* ✅ Recuperação para usuário existente
* ✅ Validação de email obrigatório
* ✅ Usuário inexistente

### 5. Testes de Verificação de Token

* ✅ Token válido
* ✅ Token ausente
* ✅ Token inválido

---

## 📊 Testes de Performance com k6

### Script de exemplo: `test/performance/login.perf.js`

```js
import http from 'k6/http';
import { check, sleep } from 'k6';

export const options = {
  vus: 20,
  duration: '1m',
};

export default function () {
  const url = 'http://localhost:3000/api/auth/login';
  const payload = JSON.stringify({
    email: 'user@example.com',
    password: 'password',
  });

  const headers = { 'Content-Type': 'application/json' };

  const res = http.post(url, payload, { headers });

  check(res, {
    'status é 200': (r) => r.status === 200,
    'resposta contém token': (r) => JSON.parse(r.body).token !== undefined,
  });

  sleep(1);
}
```

### Relatórios

* **Terminal (padrão):** resumo de métricas
* **JSON:**

  ```bash
  --out json=reports/performance.json
  ```
* **HTML (usando k6-reporter):**

  ```bash
  k6-reporter reports/performance.json -o reports/performance.html
  ```

---

## 🔐 Dados de Teste

**Usuário padrão para testes:**

* **Email:** `user@example.com`
* **Senha:** `password`

---

## 📁 Estrutura do Projeto

```
api-rest-login/
├── src/
│   ├── app.js
│   ├── config/
│   ├── controllers/
│   ├── models/
│   └── routes/
├── test/
│   ├── functional/
│   │   └── login.test.js
│   └── performance/
│       └── login.perf.js
├── reports/                # Relatórios de performance
├── package.json
└── README.md
```

---

## 🔧 Configurações

### Variáveis de Ambiente

* `PORT` - Porta do servidor (padrão: 3000)
* `JWT_SECRET` - Chave secreta para JWT (configurada no código)

### Configurações de Segurança

* **Máximo de tentativas:** 3
* **Tempo de bloqueio:** 15 minutos
* **Expiração do token:** 24 horas

---

## ⚠️ Observações Importantes

⚠️ **Este projeto é destinado apenas para estudos de Teste de Software e não deve ser usado em produção.**

* Os dados são armazenados em memória
* A chave JWT está hardcoded no código
* Não há validação robusta de entrada
* Não há rate limiting implementado

---

## 🤝 Contribuição

1. Faça um fork do projeto
2. Crie uma branch para sua feature (`git checkout -b feature/AmazingFeature`)
3. Commit suas mudanças (`git commit -m 'Add some AmazingFeature'`)
4. Push para a branch (`git push origin feature/AmazingFeature`)
5. Abra um Pull Request

---

## 📋 Licença

Este projeto está sob a licença MIT.

---

## 📞 Suporte

Para dúvidas ou sugestões, abra uma issue no repositório.

```

---

